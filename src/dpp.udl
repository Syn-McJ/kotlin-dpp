namespace kotlin_dpp { 
    SystemIDs system_ids();
    u32 latest_protocol_version();
    sequence<u8> generate_data_contract_id(sequence<u8> owner_id, sequence<u8> entropy);
};

enum KeyType {
    "ECDSA_SECP256K1",
    "BLS12_381",
    "ECDSA_HASH160",
    "BIP13_SCRIPT_HASH",
};

enum Purpose {
    "AUTHENTICATION",
    "ENCRYPTION",
    "DECRYPTION",
    "WITHDRAW",
};

enum SecurityLevel {
    "MASTER",
    "CRITICAL",
    "HIGH",
    "MEDIUM",
};

interface BinaryData {
    constructor(sequence<u8> buffer);
};

dictionary SystemIDs {
    string contract_id;
    string owner_id;
};

interface Identifier {
    [Name=new_from_vec]
    // this requires modifying rs-dpps Identifier. We shoud use a wrapper instead or use one of the existing methods.
    // UDL will also have support for 'bytes' type which might be useful for cleaner implementation.
    constructor(sequence<u8> vector);
    
    sequence<u8> to_vec();
};

interface IdentityPublicKey {
    // bind methods here
};

interface Identity {
    // bind methods here
};

interface IdentityCreateTransition {
    // bind methods here
};